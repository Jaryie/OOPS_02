Part 3: Git Manual
Answer these questions in a Markdown file and link it to your README
Imagine you are working at a game studio, and they want you to help with installing Git. 
1.	Write instructions on installing git on a windows system. Making sure to include
a.	What are the requirements to install Git on a system.
•	Win7, 8, 8.1, 10 (though it’s worth noting that I installed GitHub (…) on a Win 11 Computer.)
•	1Gb Ram
•	50Mb Storage
•	Basic Computer Knowledge
•	CMD Experience
•	Basic Programming skills

b.	If you had issues installing Git the workplace, give instructions on who you could you enquire about the installation disruption.
Supervisor, Team Lead, Department Manager, IT Department

Instructions
Step 1:Download from https://git-scm.com/downloads
Step 2: Run Installer
Step 3: Verify Installer

2.	Do research on some principles/techniques of industry standard best practices creating and working with repositories and branches in Git. 
a.	List the most important principles/techniques for creating and working with repositories
Principle- README file includes:
Repository License
Citation License
Contribution Guidelines
Code of Conduct
Project Expectations
(etc)

Techniques:
•	Pull from branches not main repository
•	Regular contributors uses branch, unaffiliated contributors use fork

b.	List the most important principles/techniques for creating and working with branches
Principle:
Principles	
Collaboration	
Customer-Centric Decision Making	
Making Data Based Decisions	
Automation	
Regular Improvement	
Failure as a Learning Opportunity	
Responsibility Throughout the Life Cycle	

7 "Cs"
Continuous Development
Continuous Integration
Continuous Testing
Continuous Deployment
Continuous Feedback
Continuous Monitoring
Continuous Operations

Technique:
•	Separate Branches by Type 
  o	Main (aka Master/Origin) Stable
  o	Supporting 
•	Separate Branches by task where possible
  o	Feature
  o	Develop
  o	Release
  o	Bug
  o	Hotfix


3.	List the steps in a Git workflow that the team should follow when working on projects.
•	Choose and define branching strategy to maximise consistency
•	Break down tasks into small. Logical units n commit frequently
•	Write descriptive commit messages
•	Pull before pushing to minimise merge conflicts by identifying and resolving differences before pushing
•	Use different branches for different functions (or tasks), ex. new features, debugging, etc)
•	Keep main branch clean and safe (ex. do NOT push untested/incomplete code)
•	Keep repository organised and use consistent naming conventions
•	Document all changes, commit, etc
